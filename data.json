{"68e656b251e67e8358bef8483ab0d51c6619f3e7a1a9f0e75838d41ff368f728":"hello, world!","9e0cb4d4f97c432d4e71e5bbb3de715738939faedab8491c5a1aeedbb26a1039":"\"blameless'","4523540f1504cd17100c4835e85b7eefd49911580f8efff0599a8f283be6b9e3":"17","2103e97aa0218f5b7f693c48c54e57346de9fa3863d50ecc9f9741e3df638bd7":"(def x 20) x","41257a37295bf501eab3f6f4590abf97239d2d0ae72083c6bdd1f3dc5de9211f":"(div \"hello\")","c29395b8e590d25c34a2c194ef80c82fab72b97ba00588172331e0595691d1d7":"(div \"hiya\")","34dc20dfdb6edc5f6dce6dba0fe1d9543ed3f672c77f4d1c30e97865bbd331b1":"(react \"div\" \"hiya\")","8f434346648f6b96df89dda901c5176b10a6d83961dd3c1ac88b59b2dc327aa4":"hi","1d9a2be3e89d771f882b8aa7d6e24945ac181eb58932405e88442be1c5922b31":"{\"p\": 4}","4a46cfaf823b2b2a8dafc511f97edbdc34a43751784165bfcd2ab4ffe3279719":"(def import (lambda (urn)\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global)))","a38f0c09e5b745eb4e67beeabd278aacc159197ff0f4e6ae1ae0ac990b4f14da":"{\"p\": 4, \"song\": \"Heart of Glass\"}","c6a57991f18ec9097dfa1daf56efb6d2f59ffe0ddfdfd6fa29db9ad464a33bf8":"{\"song\": \"Heart of Glass\"}","837802cdee9f795cc971848e9882c6a050dd3da6706ada0ecc81f23acd2488e9":"{\"song\": \"Heart of Glass\", \"artist\": \"Blondie\"}","5370bece83a970761eedeb8800e3eaa6645028e76fd8757f3c1e1958560d1754":"(def import (lambda (urn)\n             (def data (node urn))\n             (def definitions (unserialize data))\n             (load definitions global)))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (def e (react)\n        Editor\n        {\"value\": (node nodeUrn)\n         \"ref\": (lambda (cm))\n           (def cli-fns {}\n             \"cm\": cm\n             \"save\": (lambda ())\n               (save-node nodeUrn (cm.getText))\n             \"done\": (lambda ())\n               (log context)\n               (unload context))\n           (def context (load cli-fns global))\n         \"options\": {}\n           \"lineNumbers\": true})\n      e)))","0a6afaa0a5bb976bd539b82c5dbf7231c0d525920e3fb295a41d7592f950933e":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (def e \n        (react\n           Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"save\": (lambda ()\n                                             (save-node nodeUrn (cm.getText)))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n            \"options\": {\"lineNumbers\": true}}))\n      e)))\n","85072843602c3a9d4020e342005f8185884d2e85635f0f7c63168ca0f0d6d657":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (def e \n        (react\n           Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"save\": (lambda ()\n                                             (save-node nodeUrn (cm.getText)))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n            \"options\": {\"lineNumbers\": true, \"matchBrackets\": true}}))\n      e)))\n","5a256383e1cc1b05dbee30c5a577673d051acb8840bb9bf9d9ce114f5862db55":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (def e \n        (react\n           Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"save\": (lambda ()\n                                             (save-node nodeUrn (cm.getText)))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n            \"options\": {\"lineNumbers\": true \"matchBrackets\": true}}))\n      e)))\n","4ca580c3010dcf88fe55cd70605763c0322d18a70745de3bbd6c8b4edc050998":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (def e \n        (react\n           Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                   (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                             (save-node nodeUrn (cm.getText)))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n            \"options\": {\"lineNumbers\": true\n                        \"matchBrackets\": true}}))\n      e)))\n","5b1c1bfb40f631c5e9f84180057f3ef94d89101bca26fe6c9c33d85345d2ffff":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm))\n                  (def cli-fns {\"cm\": cm\n                                \"paren-mode\": (lambda ()\n                                                 (cm.setMode \"paren\"))\n                                \"indent-mode\": (lambda ()\n                                                 (cm.setMode \"indent\"))\n                                \"save\": (lambda ()\n                                          (save-node nodeUrn (cm.getText)))\n                                \"done\": (lambda ()\n                                          (log context)\n                                          (unload context))})\n                 (def context (load cli-fns global))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true}}))))\n      \n","e5f405cc467adca310193db244b51bdf425bc02fbf361ec2c96e9a61e4736017":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                             (save-node nodeUrn (cm.getText)))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true}}))))\n      \n","95a0bfbe7f4947fd1687897e14bf94282030747b76e52bade24459d0b7c16dfb":"{\"song\": \"Heart of Glass\", \"artist\": \"Blondie\", \"background\": \"white girl\"}","23cc61b6bd9bb43feb5c533df8117e2e45b47c09745880d9147ba7334ea3f5e0":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                             (save-node nodeUrn (cm.getText)))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                 (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (cm)\n                                                (cm.setOption \"fullScreen\" false))}}}))))\n","30c4b57f1f04f135dabc37f8f8f97d0c520bff545ba0a189fa432f3e42d2764f":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                             (save-node nodeUrn (cm.getText)))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                 (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))}}}))))\n","88175a8ad70ba56ccb6ae48ae9c4bd2e54a6d69c1592f1b18c84acde47aee479":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                             (save-node nodeUrn (cm.getText)))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda ()\n                                                 (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))}}}))))\n","4e663c151325dc6163a8c55b2db9b9b5c67854af960b1eede6241cd8f2683a27":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def save (lambda ()\n                                  (save-node nodeUrn (cm.getText))))\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": save\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                 (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Ctrl-S\": save}}}))))\n","5e3c59211f04ee493bd76a2faf98ae761eb0ad65160d7810f910416d50fa57dd":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def save (lambda ()\n                                  (log \"saved!)\n                                  (save-node nodeUrn (cm.getText))))\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": save\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                 (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Ctrl-S\": save}}}))))\n","52e24987338c6b39a130fe4173585579ca8bc7db536a552c8c22adce5a4eb6cd":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def save (lambda ()\n                                  (log \"saved!\")\n                                  (save-node nodeUrn (cm.getText))))\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": save\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                 (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Ctrl-S\": save}}}))))\n","4d6b800eaca0ba517862c9e22c6ac83e6ebfc0eeff9aa497c53cd861d6b6ae12":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def save (lambda ()\n                                  (log \"saved!\")\n                                  (save-node nodeUrn (cm.getText))))\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": save\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                 (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": save}}}))))\n","b6b4cf9308460b386f7cfc710bc6a0acb0a400b8536d52dcad892a8d83694920":"{\"song\": \"Heart of Glass\", \"artist\": \"Blondie\", \"bacund\": \"white girl\"}","524e6ab53026c6ee20479951f04ce7dd8741784a22840a459f7299f305e2eb31":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log \"saved ^\")\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (alert \"wat\") (log \"how\") (save cm nodeUrn))}}}))))\n","bea14ff69090b9a295ffed6c610f16694672c09b1ed5ed72cca711e3b4607b9f":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log \"saved ^\")\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","b00907f841e0deeafa064bb9576b0eced322bb5ec14b97149a6a0c5c6a639bf4":"(def import (lambda (urn))\n  (def data (node urn))\n  (def definitions (unserialize data))\n  (load definitions global))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","d0509edabefa57b42af50097825378722957f39ee0646b0d070d8dd0c8ed8e86":"{\"song\": \"Heart of Glass\", \"artist\": \"B londie\", \"bacund\": \"white girl\"}","7ba603f14e011227031e1b883964f73d42b2bc5452ec9e1aed4e78ad7878d2fe":"(def import\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n\n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","b6c8c046c368581d79680bd879500293374254ad6eb000c943db181fe1b0c9ee":"(def import\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n\n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","c60d67326a427bd0134f093f18898b1050ec9be82337387682f0e4e272e3eba2":"(def import\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","572f8cdfa6f8b2cdbb2b2d6de98235bae02c72f980789a104adfa0e387bf2d50":"(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","111ba6ceea2a8732307068cc26f1ecdf7fe0ac804859cc5ae3ea6d602f29c85e":"(def import-lisp\n  (lambda (node-urn)\n     (eval (node node-urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","1a493a9778f0b5ba9a4a2c7ca3974c96c84542a286d1335b0a45d7a5bd0384ee":"(def import-lisp\n  (lambda (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","0dab414821403ac795c94d6b1597659f083b6e7e6b611d6ace27ac2c1678bb00":"(def import_lisp\n  (lambda (node_urn)\n     (eval (node node_urn))))\n\n(def import_json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list_nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","1de3e1889e582d9ecdd8aea74ea257a6fca8cb9ac8de224aa8db0175eb380fed":"(def import_lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import_json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list_nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","a133c5b3a7dd94bdc7a67f80c192fa95914779060bbbfe1455a269c6c43974c9":"(def import_lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import_json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","4949c13ea34da97309b6b1dca9f9e223d74ef414171b4882cd26a707ed3bc473":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (react\n         Editor\n           {\"value\": (node nodeUrn)\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","148de9c5a7a44d19e56cd9ae1a554bf67847afb0c58f6e12fa29ac7ddfca9940":"p","238b86ad717d9145580f241ce81228c45aba745728186213ca88e16ae96cec8f":"1. Split up startup-script into other nodes.\n","a6be29eee43f0651e326d52ddd5a66bf5cbb1234ee2cd10dae7319b859c0c44e":"1. Make \"edit\" able to create nodes.\n2. Split up startup-script into other nodes.\n","d6684abb89bb1a55b20397b0adaeb8e40c7d328a13a19246b411163c01fd9451":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","98ac754ab446c62649a79431e25387728a56bc55e48798677384fd0d052c39dc":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n   \n(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (log text)\n      (log type text)\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","63c75ff990c6f2545e4ca5469fc3a2a6b2f1a78bd3be25f6ce89d3d346367d71":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n\n(import-lisp \"startup-script-edit\")\n","d8f7c48dfeabdf03e1f7f1634235aac155498c54ba26779c67e202c565763890":"(def hello \"goodbye\")\n","599c6acae6dcac7097e0f0f513405d2f1767b9247a0cfe82f8ae9feb97e6bdda":"(def edit2\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","c079f595404895d59e3c254247ea6bfb197bf2452bcafcfbf13300e0780a0e89":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","11f7642f5659bbbb7200898e9b8c7efd6ff6aa9bd8d35615a5414183d4dff7fe":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n    \n(import-lisp \"startup-script-edit\")\n","706394d5d683896a39c5aa7dc7bdb17cb2c4b5eb19f480c8f91e272b16288c62":"# Features\n\n1. Split up startup-script into other nodes.\n\n# Bugs\n\n1. Saving an Editor uses the correct node urn but the wrong text. The text saved is the text of the most recent Editor instance.","9d4c4595fee72869bd932f17688385b3e4dfee01bbeed44522905326a5779bd6":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","aaa9402664f1a41f40ebbc52c9993eb66aeb366602958fdfaa283b71e64db123":"h","e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855":"","91daa25ba9d38aa0af2bd911d7187863a00b43c0a4a83d0344d598b672f60799":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","62c66a7a5dd70c3146618063c344e531e6d4b59e379808443ce962b3abd63c5a":"m","3e23e8160039594a33894f6564e1b1348bbd7a0088d42c4acb73eeaed59c009d":"b","2e7d2c03a9507ae265ecf5b5356885a53393a2029d241394997265a1a25aefc6":"c","a983eb5797ff9cdd74de6baea62261ff47b516f0aba0f84ab705a9979ef7faca":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","4faa32568b951521e86d2fcd99faeabeae95774f882c5902466e51eae3d01a82":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (log _)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","78098e593415bab5af24e80574ca14c8602c3926a3c2ae55fb34733551767dae":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                (log cm)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","13cf4508d5a494eb68ac62964612eb0cb8978c4b3a0148c12f34384ce8f63657":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                (log cm)\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","00aa3308dcee60fe2430c1a5958082785fbfbf8309629c6b2f070ed07a3b74a9":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                (log cm)\n                                                (log (new cm))\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","223d44045c18df2838d89e9a3d5eec207595466e03bfcbbdb93f2b8470287a9b":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                (log cm)\n                                                (log (cm.options))\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","d0b441980230eb3779dd15d199812df418d09ea8369c5ac31f50f874c37b277d":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (def local {})\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (set local \"cm\" cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda () (save local.cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                (log cm)\n                                                (log (cm.options))\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","594e519ae499312b29433b7dd8a97ff068defcba9755b6d5d00e84c524d67b06":"z","fd0ef4318ab4a8f5dfce9dc248dea11486ab9b7aba19a245b2cd88de3891c27d":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (def local {})\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (set local \"cm\" cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                            (log local)\n                                            (save local.cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                (log cm)\n                                                (log (cm.options))\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","1b16b1df538ba12dc3f97edbb85caa7050d46c148134290feba80f8236c83db9":"n","1bf3a0724bc7fb623332a0266c1a1174bfcd43bd1913187358c50c0658e32092":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (def local {})\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (set local \"cm\" cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                            (log \"howdy\")\n                                            (log local)\n                                            (save local.cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                (log cm)\n                                                (log (cm.options))\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save cm nodeUrn))}}}))))\n","a1fce4363854ff888cff4b8e7875d600c2682390412a8cf79b37d0b11148b0fa":"y","e2f9e4293303b3de0aa0713b6c60e50546584efe6fdb17bb582ff17bca99f273":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (def local {})\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (set local \"cm\" cm)\n                     (def cli-fns {\"cm\": cm\n                                   \"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                            (log \"howdy\")\n                                            (log local)\n                                            (save local.cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (cm)\n                                                (log cm)\n                                                (log (cm.options))\n                                                (cm.setOption \"fullScreen\" (not (cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save local.cm nodeUrn))}}}))))\n","ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb":"a","0bfe935e70c321c7ca3afc75ce0d0ca2f98b5422e008bb31c00c6d7f1f1c0ad6":"u","43792f3474acdd3a3ede1d68a8d69cdbdd139612dbcfdfa9ba0a3175a97b71db":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (def local {})\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (set local \"cm\" cm)\n                     (def cli-fns {\"paren-mode\": (lambda ()\n                                                    (local.cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (local.cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                            (save local.cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (local.cm.setOption \"fullScreen\" (not (local.cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (local.cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save local.cm nodeUrn))}}}))))\n","2c5abdef2a0eacb49f5115991a9331e8f78c5a15f986426815fd9486b5230628":"seventeen","3fbfc0dfa2b87f059c18dbbd89c420cee1b91ed0c3f43a2d8cf768320b94ff50":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (log cm)\n                \"it takes the text of the latest editor and the node urn of the selected editor\"\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (def local {})\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (set local \"cm\" cm)\n                     (def cli-fns {\"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                            (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (local.cm.setOption \"fullScreen\" (not (local.cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (local.cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save local.cm nodeUrn))}}}))))\n","ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad":"abc","82b5f7770097973f2962c241c557369ec2d38e9a1bda03176b9ca511f1ca56cf":"plenty","9e6895550bad4194e7b963eabfc4179c6985c3eb1ef2e44c481bec5aac0d2ef8":"# Features\n\n1. Split up startup-script into other nodes.\n\n# Bugs\n\nNone!\n\n(lol right)","4d1d6440e5d689cae4a8992480fb2fb5fa3aee33b0b44477ae122bd899fac514":"# Features\n\n1. Split up startup-script into other nodes.\n2. Write script to prune data.json aka garbage collection.\n\n# Bugs\n\nNone!\n\n(lol right)","3ba7d3f2d460af5d505221c1d2dca72b60023a0c17fb55d88f0f2f0826286696":"(def edit\n  (block\n    (def save-node save)\n    (def save (lambda (cm nodeUrn)\n                (save-node nodeUrn (cm.getText))))\n    (lambda (nodeUrn)\n      (def text\n        (or (node nodeUrn)\n            \"\"))\n      (def local {})\n      (react\n         Editor\n           {\"value\": text\n            \"ref\": (lambda (cm)\n                     (set local \"cm\" cm)\n                     (def cli-fns {\"paren-mode\": (lambda ()\n                                                    (cm.setMode \"paren\"))\n                                   \"indent-mode\": (lambda ()\n                                                    (cm.setMode \"indent\"))\n                                   \"save\": (lambda ()\n                                            (save cm nodeUrn))\n                                   \"done\": (lambda ()\n                                             (log context)\n                                             (unload context))})\n                    (def context (load cli-fns global)))\n             \"options\": {\"lineNumbers\": true\n                         \"matchBrackets\": true\n                         \"extraKeys\": {\"F11\": (lambda (_)\n                                                (local.cm.setOption \"fullScreen\" (not (local.cm.getOption \"fullScreen\"))))\n                                       \"Esc\": (lambda (_)\n                                                (local.cm.setOption \"fullScreen\" false))\n                                       \"Cmd-S\": (lambda (_) (save local.cm nodeUrn))}}}))))\n","1a3c7a80d42185045f9d5faab6a75fd7c9b4d76f4095114c11981e7cdc13f561":"# Features\n\n1. Split up startup-script into other nodes.\n2. Write script to prune data.json aka garbage collection.\n3. Move from making functions from a giant string. This will enable parameters with non-javascript characters like \"-\" and paves the way for macros.\n\n# Bugs\n\nNone!\n\n(lol right)","dfe802bebea75949db247d9b467ee717907a6446a64979d8e140f6441b08f3ab":"# Features\n\n1. Error handling.\n2. Split up startup-script into other nodes.\n3. Write script to prune data.json aka garbage collection.\n4. Move from making functions from a giant string. This will enable parameters with non-javascript characters like \"-\" and paves the way for macros.\n\n\n# Bugs\n\nNone!\n\n(lol right)","1916c7b74176d85d27861e463173b56bd454c09a123bd78d422ecce8ea727f8b":"(try\n  (block\n    (log \"123\")\n    (throw \"razorblade\")\n    (log \"456\"))\n  (log err))\n","f36be640f45a7855c115a46262224c9266f13a292888772dada60e6ae6dd7ee1":"(try\n  (block\n    (log \"123\")\n    (throw \"razorblade\")\n    (log \"456\"))\n  (block\n   (log err)\n   err))\n","3eaf539f41059706a96d13e03bb994142c13898181de0063602aa2fe72bf283c":"# Features\n\n2. Split up startup-script into other nodes.\n3. Write script to prune data.json aka garbage collection.\n4. Move from making functions from a giant string. This will enable parameters with non-javascript characters like \"-\" and paves the way for macros.\n\n\n# Bugs\n\nNone!\n\n(lol right)","5df5e6d8b26f6d3a8b8d360c30780f5044a04e5eba334301ea95b36872c36fa6":"(def div\n   (lambda (props children)\n      (react \"div\" props children)))","ec95e8d7970ae862ace07cfbb8d5240171ce46b0cd1b6d993ab9de2a8066c62b":"# Features\n\n* Variable number of args, finite (optional args).\n* Variable number of args, infinite (triple-elipses ...).\n2. Split up startup-script into other nodes.\n3. Write script to prune data.json aka garbage collection.\n4. Move from making functions from a giant string. This will enable parameters with non-javascript characters like \"-\" and paves the way for macros.\n\n\n# Bugs\n\nNone!\n\n(lol right)","9a0b08bc08459de71a6dd4a50b4c17d888256095daec6e31303f5069b001ef69":"(def div\n   (lambda (props children)\n      (log arguments)\n      (react \"div\" props children)))","aa296827bb989226fb0f6e77143638c1d6a70d489881b70411812719b59e9056":"# Features\n\n* Variable number of args, finite (optional args).\n* Variable number of args, infinite (triple-elipses ...).\n* Split up startup-script into other nodes.\n* Write script to prune data.json aka garbage collection.\n* Move from making functions from a giant string. This will enable parameters with non-javascript characters like \"-\" and paves the way for macros.\n* Let option-i through so dev console can be opened. Or switch to positive filter instead of negative filter.\n\n\n# Bugs\n\nNone!\n\n(lol right)","d1ab0edc778f9dea1e0f785295a4ba62a8c7a09dbf47711a55af58e4caac53fb":"(def div\n   (lambda (props children)\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children [])))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children [])))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (react props children)))","2e48e5954aa9e8e4759e4e836ffba8e45fcb92832fbd21b6f03230a0a7938fc6":"(def div\n   (lambda (props children)\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children [])))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (react props children)))","394da1174346a61633643e3103f9758f5d44076810ba6534dbee547757484411":"(def div\n   (lambda (props children)\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children (list))))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (react props children)))","0d84e7867bbf0f43a773dc10f0a32ff84cba1c91783b15bdffc13badfad19eb2":"(def div\n   (lambda ()\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children (list))))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (react props children)))","f5abe04eb00dc25329d664a931f359aa4bf5501832a5764831e1cbe05c21c6ca":"(def div\n   (lambda (...)\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children (list))))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (react props children)))","ea853852e12a77c8109bbd7d85906301b363ea4a26118605f84fd72a6cf96829":"(def div\n   (lambda (nil)\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children (list))))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (react props children)))","69e8fd27939e2f5dd45c8029c100d4a8cc27c626b75f6682ac32de898f7089bc":"(def div\n   (lambda ()\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children (list))))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (react \"div\" props children)))","60c32611a0e3c24ef731d0f9ed86299afcdbb7cd05b666e351d1a19f9158e938":"(def div\n   (lambda ()\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children (list))))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","c7d9672711787a5000d183107e536d0d0dc105188e8fb77c30c3582b51cd4138":"(def div\n   (lambda ()\n      (log arguments)\n      (if (== arguments.length 0)\n        (block!\n          (def props {})\n          (def children (list))))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (def props arguments.0)\n           (def children arguments.1)))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","e616ac8b31d3fce1d6be86843d7f50c21cf509903dbbfb426ff2e28735fc2e66":"(def div\n   (lambda ()\n      (console.log arguments.length)\n      (if (== arguments.length 0)\n        (block!\n          (console.log \"L0\")\n          (def props {})\n          (def children (list))))\n      (if (== arguments.length 1)\n         (if (Array.isArray arguments.0)\n            (block!\n              (console.log \"L1a\")\n              (def props {})\n              (def children arguments.0))\n            (block!\n              (console.log \"L1b\")\n              (def props arguments.0)\n              (def children (list))))\n         (block!\n           (console.log \"L2\")\n           (def props arguments.0)\n           (def children arguments.1)))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","b6dc933311bc2357cc5fc636a4dbe41a01b7a33b583d043a7f870f3440697e27":"wow","53e301e0295148f3d7edfcace7190dcc9f04ee65f96b539c6a127756a14cb75e":"(def a 12)","dba6a41db3c8c9f3360efe4b6e0f3846a42681f3f60cb30ef76579cf64211802":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n\n(def safe-import\n   (lambda! (node_urn)\n      (try\n         (block!\n           (import-lisp node_urn))\n         nil)))\n\n(safe-import \"startup-script-edit\")\n","fa8bd19f523974f3fe359259867b20849eb00eaa782f19055bcaed0600ca043c":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n\n(def safe-import\n   (lambda! (node_urn)\n      (try\n         (block!\n           (import-lisp node_urn))\n         nil)))\n\n(safe-import \"startup-script-edit\")\n(safe-import \"lib/html\")\n","5485c1fb4283a572d612ce2a20f06d30aca2e0f80ce65ef9bb207f93912c14e6":"(def div\n   (lambda ()\n      (def props {})\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def arguments (arguments.slice 1)))))\n      (react \"div\" props arguments)))","5b90a6f6292784a6be7fcc2e847076e4dff8416467fcd353407eedb07536c1c1":"(def div\n   (lambda ()\n      (def props {})\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def arguments (arguments.slice 1)))))\n      (log props)\n      (log arguments)\n      (react \"div\" props arguments)))","dbcdec29866e85dec74809f29f99290f5ce8391c04ea155280bba3b931cc8fa7":"(def div\n   (lambda ()\n      (def props {})\n      (def children arguments)\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","3bb70b07773e38d6447ece54255fc87f95689aa4d010cece33fbad260d519e6b":"(def div\n   (lambda ()\n      (def props {})\n      (def children arguments)\n      (log children)\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","121d6d86a11fc9bf6522cb06dea82651a8332700914afb9d3e1dbcbeca4a46d4":"(def div\n   (lambda ()\n      (def props {})\n      (def children arguments)\n      (log children)\n      (log (children.slice 1))\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","35210e37f096eda4dccbb7346f03ba161b5c7efca9533344dfa08fa2dba35db7":"(def div\n   (lambda ()\n      (def props {})\n      (def children arguments)\n      (log children)\n      (log (children.slice 1))\n      (log children.slice)\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","e10320b03b0e10a23940ae52b1299cb016538d8f99fdabac873247da27f082bf":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from(arguments)))\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","bae395f6d961e04a76d0cb62e498ea48fcb9ca999479d0a2f984d9e945d2ce3d":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","0b1f4cdc15245f42e0c88bfa99113e95a86f60f0bb936ca82033529ca691ba47":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log children)\n      (log Array.from)\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","8a3f130bee1df70fceda5d239f30faa77aecb8fb850e63e7177c3ed3b4f16ff7":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log children)\n      (log (children.slice 1))\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","bcc98336405c9d469d3cc6c0411fbe8e0fbf81dc9c642692dae5ef8615f1fd24":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log children)\n      (log (children.slice 1))\n      (log \"hands on me\")\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","468356cb7ea8a0a0c89488a7848c70b9506c732b609e3e002082bc2403a28113":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log children)\n      (log children.slice)\n      (log (children.slice 1))\n      (log \"hands on me\")\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","0a5efdbdfe57167b4325764103d4f0d821765941b2ed7cccc754c62a99235dfd":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log children)\n      (log children.slice)\n      (log (children.slice 1))\n      (log 1)\n      (log \"hands on me\")\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","e78e88e0f530be5605974c4a1d71624e7c44fa23af41e8d3b0b753a4980509df":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log 1)\n      (log children)\n      (log children.slice)\n      (log (children.slice 1))\n      \n      (log \"hands on me\")\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","e28c14c3523183dc6fdd9af9fe9607083f731dda69091795d3f2ac252fe7dfbf":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log 1)\n      (log ((. [] slice)) 1)\n      (log children)\n      (log children.slice)\n      (log (children.slice 1))\n      \n      (log \"hands on me\")\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","11566022209279961cb2498d3ccdd771103de60b0ced18ce9dfb13a6d0fdcce6":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log 1)\n      (log ((. [] slice) 1))\n      (log children)\n      (log children.slice)\n      (log (children.slice 1))\n      \n      (log \"hands on me\")\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","96535ece3938ce10c650e51c07c6931109f681cf4818ff25d3e02e307b55465b":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      (log 1)\n      (log ((. (list) slice) 1))\n      (log children)\n      (log children.slice)\n      (log (children.slice 1))\n      \n      (log \"hands on me\")\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","5928bcaa2f3c9a0295f10dfa713882d50a686426f919e314c8b894e497ad221f":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log \"hands on me\")\n      (if (> arguments.length 0)\n         (if (type arguments.0 \"object\")\n            (block!\n              (def props arguments.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","073e63298aa0a4d58da575d1a1f52424df9293ee058dcc9cc2f6bf8c3123a95d":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log \"hands on me\")\n      (if (> children.length 0)\n         (if (type children.0 \"object\")\n            (block!\n              (def props children.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","b71daf4a58c6ab6b29c698d89c4dd1994fc31e0fcba93e2c475132f6b1bbaed7":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log children.length)\n      (log children.0)\n      (log (type children.0))\n      \n      (log \"hands on me\")\n      (if (> children.length 0)\n         (if (type children.0 \"object\")\n            (block!\n              (def props children.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","7512db5681dc5f277fd92b2bc5522a3032be378c1937ed0f7b2c20e8aa638b16":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log children.length)\n      (log children.0)\n      (log (type children.0))\n      \n      (log \"hands on me\")\n      (if (> children.length 0)\n         (if (== (type children.0) \"object\")\n            (block!\n              (def props children.0)\n              (def children (children.slice 1)))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","555804f15c735dd5f816030e1a857fe6dc27e4ad3fad463e69fa36d96487bbec":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log \"hands on me\")\n      (if (> children.length 0)\n         (if (== (type children.0) \"object\")\n            (block!\n              (def props children.0)\n              (def children (children.slice 1)))))\n      (react \"div\" props children)))","b03ea73cd7191df2517307e4f67e957ef88ea5213a4f954c126b55482eb4a877":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log \"hands on me\")\n      (if (and (> children.length 0)\n               (== (type children.0) \"object\")\n               (== (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react \"div\" props children)))","f2e16a44c38906c50ca68f32eabb7724328560315d64862339990f06981bb573":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log \"hands on me\")\n      (if (and (> children.length 0)\n               (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react \"div\" props children)))","6bb4216d90ee7b617ac04a0f19b802cda53b6df187bcc12031dc01e1b3ab20fe":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log \"hands on me\")\n      (log (== (type children.0) \"object\"))\n      (log (!= (type children.0.$$typeof) \"symbol\"))\n      (if (and (> children.length 0)\n               (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react \"div\" props children)))","d5d6602f09c36cb19bb87e6c633df4623d310e754464b7409b0b497308dc8c81":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log \"hands on me\")\n      (log (== (type children.0) \"object\"))\n      (log (!= (type children.0.$$typeof) \"symbol\"))\n      (if (and (> children.length 0)\n               (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","cf642adb306df53af56eb4fbbacd43ab0c9f34b79a6b47b4a33a2d75567b04c6":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n      \n      (log \"hands on me\")\n      (log (== (type children.0) \"object\"))\n      (log (!= (type children.0.$$typeof) \"symbol\"))\n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (log props)\n      (log children)\n      (react \"div\" props children)))","438c324ca66b1e756d0ec53080ddd5045c10329b5770b22d69ef3940e1d62e7e":"(def div\n   (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react \"div\" props children)))","6a26a8cdc7103b706f8343b14c6902edce7527c99617c9f05d8f9ea469d3d870":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def safe-import\n   (lambda! (node_urn)\n      (try\n         (block!\n           (import-lisp node_urn))\n         nil)))\n\n(safe-import \"startup-script-edit\")\n(safe-import \"lib/html\")\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n","632e9e7eb31e2073724d8df6209b82b02c9fb05cbdb63eb2ae8253ec73ab3325":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Move from making functions from a giant string. This will enable parameters with non-javascript characters like \"-\" and paves the way for macros.\n* Let option-i through so dev console can be opened. Or switch to positive filter instead of negative filter.\n\n\n# Bugs\n\nNone!\n\n(lol right)","a7210125f08994e24cfc8f50aada8415370ebd91be6ffa5970ba959ad72d2b77":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Let option-i through so dev console can be opened. Or switch to positive filter instead of negative filter.\n\n\n# Bugs\n\nNone!\n\n(lol right)","93820b65790c07e7a84224603b140cb77dceb19cee10306c33330b27031543d0":"# Features\n\n* Write script to prune data.json aka garbage collection.\n\n\n# Bugs\n\nNone!\n\n(lol right)","54d8cd321414363255e7e2df286bc00fc1e18947b7a39ee46d8651d10c63e3f0":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Macro support!\n* Expand html library.\n\n\n# Bugs\n\nNone!\n\n(lol right)","b26066932533d522a8c5ebc76f02016b1fe9bdfe86c330b978a52b202cac7c60":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n(def div (__html_helper \"div\"))","34f0ac0dcb4ee085fa24b49a44607746f61b21598f6e978fa9824d7c4c07beab":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n\n(def div (__html_helper \"div\"))\n\n(set context \"button\" (__html_helper \"button\"))","5f0e75aa68831e78fa06de4c238fd04586dc8cf3b55dd5ff3967ef066b4fe1a5":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n\n(def div (__html_helper \"div\"))\n\n(define \"button\" (__html_helper \"button\"))\n","9d8b2e3002be2fabe894b7331061bc92293c6f904745d0e3f1b39c0552105072":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n\n(def div (__html_helper \"div\"))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n             \n\n(define \"button\" (__html_helper \"button\"))\n","ec59f9cf5fdda76db8bda33ad3bdb9094306d32b6860da84701833b4cfb1a19c":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n\n(def div (__html_helper \"div\"))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n\n\n(define \"button\" (__html_helper \"button\"))\n","72ee8d97da0698177731cd5e4e94f9ed40761f07dcb9377360d2f2562c9199d2":"(def r\n  (lambda (t x)\n     (if (> x 0)\n        (r (+ t x) (- x 1)))))\n         \n         ","c0abae28ce08ab0a9c50dc266d97684ae8f5c71b60fc60986f063144c66594ed":"(def r\n  (lambda (t x)\n     (if (> x 0)\n        (r (+ t x) (- x 1))\n        t)))\n         \n         ","53fcd6f608e4a3dbe9a27376aa994e1c4f14c7f2a7851e2d620f08b7f7e02118":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Macro support!\n* Expand html library.\n* Add iteration that doesn't require recursion.\n* \n\n\n# Bugs\n\nNone!\n\n(lol right)","c4c9c32f0b3e05bab0d3c894292e04b03bbc88495b7710f43380d10caebee797":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Macro support!\n* Expand html library.\n* Add iteration that doesn't require recursion.\n* Use exceptions instead of returning objects w/ an \"error\" field\n\n\n# Bugs\n\nNone!\n\n(lol right)","acd6203add1c6c0cb4a9260db53b60c626cfe445c809689d08411c4130f5662c":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Macro support!\n* Expand html library.\n* Add iteration that doesn't require recursion.\n* Use exceptions instead of returning objects w/ an \"error\" field.\n\n\n# Bugs\n\nNone!\n\n(lol right)","73ee1d8f092799a286a9cea486804bec947c370c64b328f4f6e1af5b261eaece":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Macro support!\n* Expand html library.\n* Add iteration that doesn't require recursion.\n* Use exceptions instead of returning objects w/ an \"error\" field.\n* Make most builtins accept multiple arguments.\n\n\n# Bugs\n\nNone!\n\n(lol right)","b63fc815f67f736d4a0fc66e2f8cc03999694670acf0df22e585a42024071738":"(def r2\n   (lambda (x)\n      (def t 0)\n      (while (> x 0)\n         (block!\n            (def t (+ t x))\n            (def x (- x 1))))\n      t))\n             \n   \n\n(def r\n  (lambda (t x)\n     (if (> x 0)\n        (r (+ t x) (- x 1))\n        t)))\n         \n         ","bac1256929b0647014981cf026241085b4f313b965ec96b7a28357565cb80824":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Macro support!\n* Expand html library.\n* Add iteration that doesn't require recursion.\n* Use exceptions instead of returning objects w/ an \"error\" field.\n* Make most builtins accept multiple arguments.\n* Persistent command history. Maybe from moving to a daemon instead client-side? Or stored JSON in a node.\n\n\n# Bugs\n\nNone!\n\n(lol right)","1a1a546dddfbc04cedd5c31c4d0b1379e5ebb64ffbc4df31b54c5fbb7c5c42c3":"(def list (lambda ()\n             (Array.from(arguments))))","235fb4a7a7678a51077053ab0b9220ed821d3329ad661ec49939074aa57bd460":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n\n\n(define \"button\" (__html_helper \"button\"))\n","a6779607998e76fad90a9fbd8a41cb9845939affb0d5f155a5ba18f5527802c9":"(def list (lambda ()\n             (Array.from arguments)))","9ac92007139fd46d0ad5b5df4832a0de43154efb6e5e7eb31862a958dd4128f4":"(def list2 (lambda ()\n              (Array.from arguments)))","21e2eaf6c8126fb1fc4f4f0f00ff79307b99cabdc244060e4a16f578c67996d5":"(def list\n   (lambda ()\n      (Array.from arguments)))","478f206fc739947f7e40817891d83babbf747caddda0c81f0f616b9eb5ae7654":"(def import-lisp\n  (lambda! (node_urn)\n     (eval (node node_urn))))\n\n(def import-json\n  (lambda (urn)         \n    (def data (node urn))\n    (def definitions (unserialize data))\n    (load definitions global)))\n\n(def safe-import\n   (lambda! (node_urn)\n      (try\n         (block!\n           (import-lisp node_urn))\n         nil)))\n\n(safe-import \"startup-script-edit\")\n(safe-import \"lib/html\")\n(safe-import \"lib/lisp\")\n\n(def list-nodes\n  (lambda ()\n    (nodes \"robert\")))\n","35307fe326f3c2f38b9ea2cf6a08e401459d08641bd865a356a506c7ed190921":"(def list\n   (lambda ()\n      (Array.from arguments)))\n      \n(def head\n   (lambda (arr)\n      arr.0))\n      ","ebf8388ed2cad8c725498f6f18c9e5e21ed5540f8342b42da452405b05d2c1e3":"# Features\n\n* Write script to prune data.json aka garbage collection.\n* Macro support!\n* Expand html library.\n* Add iteration that doesn't require recursion.\n* Use exceptions instead of returning objects w/ an \"error\" field.\n* Make most builtins accept multiple arguments.\n* Persistent command history. Maybe from moving to a daemon instead client-side? Or stored JSON in a node.\n* Support for finite parameters. Bugs are more likely when apparently-used arguments are ignored.\n\n\n# Bugs\n\nNone!\n\n(lol right)","b6fa372977ff01441d3d4174921af71b10ff2f2eea4ee4bed99c1a2e3a66a12e":"(def list\n   (lambda ()\n      (Array.from arguments)))\n      \n(def head\n   (lambda (arr)\n      arr.0))\n      \n(def rest\n   (lambda (arr)\n      (arr.slice 1)))","426d9f4603df7d19378363839f729db84cb16c9ff34a9cb5094c357ce3d4e0bf":"(def list\n   (lambda ()\n      (Array.from arguments)))\n      \n(def head\n   (lambda (arr)\n      arr.0))\n      \n(def rest\n   (lambda (arr)\n      (arr.slice 1)))\n      \n(def type typeof)","29a97e0418950299fef3debc32ecd99405001f45865acadecc1de535c453d338":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n\n\n(define \"button\" (__html_helper \"button\"))\n(define \"div\" (__html_helper \"div\"))\n","30c0415d095cbf67d3b8a7336170dacec7d150e9668b2c729dd54d7582ea0e20":"(def head\n   (lambda (arr)\n      arr.0))\n      \n(def rest\n   (lambda (arr)\n      (arr.slice 1)))\n      ","ca499b26ba2bc86758426db612199de8046c542f60f58770989f664ed1ab1918":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (typeof children.0) \"object\")\n               (!= (typeof children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n\n\n(define \"button\" (__html_helper \"button\"))\n(define \"div\" (__html_helper \"div\"))\n","5b76c4415cc21fc04312a2fc451bc9dfc7a82f127ed83e56facb30d2073d3961":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (typeof children.0) \"object\")\n               (!= (typeof children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n\n(each tags\n      (lambda (tag)\n         (define tag (__html_helper tag))))\n      \n        \n\n(define \"button\" (__html_helper \"button\"))\n(define \"div\" (__html_helper \"div\"))\n","05b465825f10a650f9e2d73db3ef0ecd6f7dec8ef3b55b6f80d44eb71525dc81":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (typeof children.0) \"object\")\n               (!= (typeof children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n\n(each tags\n      (lambda (tag)\n         (define tag (__html_helper tag))))\n      ","25ef645600c015faad1b31355e6b3c6d3e6b4ce2191994b59a81b544fe5963f6":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (typeof children.0) \"object\")\n               (!= (typeof children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n\n(each tags\n      (lambda! (tag)\n         (define tag (__html_helper tag))))\n      ","bb775d7a3acb6c8d44a61479be7f49fe086866d91ef26c6db41e89781ddc98d8":"(def __html_helper\n   (lambda (tag)\n     (lambda ()\n      (def props {})\n      (def children (Array.from arguments))\n    \n      (if (and (== (type children.0) \"object\")\n               (!= (type children.0.$$typeof) \"symbol\"))\n        (block!\n          (def props children.0)\n          (def children (children.slice 1))))\n      (react tag props children))))\n\n(def tags (list\n             \"a\"\n             \"audio\"\n             \"b\"\n             \"blockquote\"\n             \"body\"\n             \"br\"\n             \"button\"\n             \"canvas\"\n             \"caption\"\n             \"code\"\n             \"col\"\n             \"colgroup\"\n             \"datalist\"\n             \"del\"\n             \"dialog\"\n             \"div\"\n             \"em\"\n             \"embed\"\n             \"footer\"\n             \"form\"\n             \"h1\"\n             \"h2\"\n             \"h3\"\n             \"h4\"\n             \"h5\"\n             \"h6\"\n             \"head\"\n             \"header\"\n             \"hr\"\n             \"html\"\n             \"i\"\n             \"iframe\"\n             \"img\"\n             \"input\"\n             \"ins\"\n             \"label\"\n             \"li\"\n             \"link\"\n             \"mark\"\n             \"menu\"\n             \"menuitem\"\n             \"meta\"\n             \"nav\"\n             \"noscript\"\n             \"object\"\n             \"ol\"\n             \"optgroup\"\n             \"option\"\n             \"p\"\n             \"param\"\n             \"picture\"\n             \"pre\"\n             \"progress\"\n             \"q\"\n             \"rp\"\n             \"rt\"\n             \"ruby\"\n             \"s\"\n             \"script\"\n             \"section\"\n             \"select\"\n             \"source\"\n             \"span\"\n             \"strong\"\n             \"style\"\n             \"sub\"\n             \"sup\"\n             \"table\"\n             \"tbody\"\n             \"td\"\n             \"textarea\"\n             \"tfoot\"\n             \"th\"\n             \"thead\"\n             \"time\"\n             \"title\"\n             \"tr\"\n             \"track\"\n             \"u\"\n             \"ul\"\n             \"video\"\n             \"wbr\"))\n\n(each tags\n      (lambda! (tag)\n         (define tag (__html_helper tag))))\n      "}